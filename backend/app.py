import os
import uuid
import streamlit as st
import time
from db import get_chats, add_chat_message, add_image_message, get_chat_history, get_files_by_group, create_file_group, \
    get_groups, add_file_to_db, create_chat
from streamlit_cookies_manager import CookieManager
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫—É–∫

cookies = CookieManager()
if not cookies.ready():
    # –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É–∫
    st.stop()

if 'user_input' not in st.session_state:
    st.session_state.user_input = ""

if 'chats' not in st.session_state:
    st.session_state.chats = {"Main Chat": [
        {"sender": "assistant", "message": "How can I help you?"}]}

if 'selected_chat' not in st.session_state:
    st.session_state.selected_chat = ""

if 'is_processing' not in st.session_state:
    st.session_state.is_processing = False

if not os.path.exists("/files"):
    os.makedirs("/files")


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —á–∞—Ç–∞ –∏ —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
def chatbot_response(user_message) -> (str, str, int):
    message = f"–û—Ç–≤–µ—Ç –±–æ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_message}"
    src = "test.pdf"
    page_num = 3
    return message, src, page_num


# def chatbot_response(chatid):
#     context = get_chat_history(chatid)
#     context = [{"role": msg["sender"], "content": msg["message"]} for msg in
#                context]
#     # TODO: implement rag
#     context = [{"role": "system", "content": "–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∫–æ–º–ø–∞–Ω–∏–∏. –¢–≤–æ—è –∑–∞–¥–∞—á–∞, —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—Ç—å –≤—ã–¥–∞—á—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –¢–µ–±–µ –±—É–¥—É—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –≤—ã–¥–µ–ª–µ–Ω—ã —Ç–µ–≥–∞–º–∏ \"<rag>\" –∏ \"</rag>\" ‚Äî –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤–Ω—É—Ç—Ä–∏ —Ç–µ–≥–æ–≤ —Å—á–∏—Ç–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π, –≤—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–∫–∂–µ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–π, –∫–∞–∫ –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π. –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–ª–µ–¥–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–∏–Ω—Ü–∏–ø–∞–º: 1) –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π, —Ç–æ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å. 2) –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî –ø–æ–∏—Å–∫–æ–≤—ã–π (–≤ –Ω—ë–º –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ç–æ–Ω–∞—Ü–∏–∏), —Ç–æ –Ω—É–∂–Ω–æ –∫—Ä–∞—Ç–∫–æ –æ–ø–∏—Å–∞—Ç—å, —á—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π. 3) –ï—Å–ª–∏ —Ç—ã —Å—á–∏—Ç–∞–µ—à—å, —á—Ç–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –Ω–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî –Ω–∞–ø–∏—Å–∞—Ç—å, —á—Ç–æ —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ –ø—Ä–∏—á–∏–Ω–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤."}] + context
#     resp = ask(context)
#     return resp


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ user_id
user_id = cookies.get('Authorization')
if not user_id:
    user_id = str(uuid.uuid4())
    cookies['Authorization'] = user_id
    create_chat('–ü–µ—Ä–≤—ã–π —á–∞—Ç', user_id)
    st.session_state.chats = get_chats(user_id)[0]['id']

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —á–∞—Ç–æ–º –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π —Ñ–∞–π–ª–æ–≤")

tab1, tab2 = st.tabs(["–ß–∞—Ç", "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞"])

# –í–∫–ª–∞–¥–∫–∞ —á–∞—Ç–∞
with tab1:
    st.title("üí¨ Chatbot")

    with st.sidebar:
        new_chat_name = st.text_input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞",
                                      key="new_chat_name")

        if st.button("–°–æ–∑–¥–∞—Ç—å —á–∞—Ç"):
            if new_chat_name:
                user_id = str(cookies.get('Authorization'))
                chat_id = create_chat(new_chat_name, user_id)
                st.session_state.chats[chat_id] = new_chat_name
                st.session_state.selected_chat_id = chat_id

        user_id = str(cookies.get('Authorization'))
        chats = get_chats(user_id)
        chat_options = {chat['id']: chat['name'] for chat in chats}
        selected_chat_id = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç",
                                        options=list(chat_options.keys()),
                                        format_func=lambda x: chat_options[x])
        st.session_state.selected_chat_id = selected_chat_id

    st.caption("üöÄ A chatbot powered by DeepTech")

    if selected_chat_id:
        chat_messages = get_chat_history(selected_chat_id)
    else:
        chat_messages = []

    chat_container = st.container()
    with chat_container:
        for msg in chat_messages:
            if not msg["is_pdf_page"]:
                st.chat_message(msg["sender"]).write(msg["message"])
            else:
                try:
                    page_num = msg["page_num"]
                    src = msg["message"]
                    st.markdown(
                        f'<embed src="/files/{src}#page={str(page_num)}" width="100%" height="500px" type="application/pdf">',
                        unsafe_allow_html=True
                    )

                except:
                    st.chat_message(msg["sender"]).image("not_found.jpg", caption="–§–∞–∏ÃÜ–ª –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω")

    prompt = st.chat_input("Your message...")

    if prompt:
        if not selected_chat_id:
            st.error("–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç!")
        else:
            add_chat_message(selected_chat_id, "user", prompt)
            with chat_container:
                st.chat_message("user").write(prompt)
            response, src, page_num = chatbot_response(prompt)
            #response = chatbot_response(selected_chat_id)
            add_chat_message(selected_chat_id, "assistant", response)
            add_image_message(selected_chat_id, "assistant", src, page_num)
            with chat_container:
                st.chat_message("assistant").write(response)
                st.chat_message("assistant").markdown(
                    f'<embed src="/files/{src}#page={str(page_num)}" width="100%" height="500px" type="application/pdf">',
                    unsafe_allow_html=True
                )

# –í–∫–ª–∞–¥–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
with tab2:
    st.header("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Ñ–∞–π–ª–æ–≤")

    new_group_name = st.text_input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã –¥–ª—è —Ñ–∞–π–ª–æ–≤:",
                                   key="new_group_name")

    if st.button("–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É"):
        if new_group_name:
            create_file_group(new_group_name)
            st.success(f"–ì—Ä—É–ø–ø–∞ '{new_group_name}' —Å–æ–∑–¥–∞–Ω–∞!")

    selected_group = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
                                  get_groups())
    st.session_state.selected_group = selected_group

    files_container = st.empty()


    def display_files():
        with files_container.container():
            st.subheader(f"–§–∞–π–ª—ã –≤ –≥—Ä—É–ø–ø–µ: {selected_group}")
            files = get_files_by_group(selected_group)
            if files:
                for file in files:
                    with st.expander(file['file_name']):
                        st.write(f"–ò–º—è —Ñ–∞–π–ª–∞: {file['file_name']}")
                        st.write(f"–¢–∏–ø —Ñ–∞–π–ª–∞: {file['file_type']}")
                        st.write(
                            f"–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: {file['timestamp'].strftime('%Y-%m-%d %H:%M:%S')}")

                        if file['file_type'] == "txt":
                            try:
                                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º memoryview –≤ bytes, –∞ –∑–∞—Ç–µ–º –¥–µ–∫–æ–¥–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
                                content = file['content'].tobytes().decode(
                                    "utf-8")
                                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
                                st.markdown(
                                    f"""
                                    <div style="height:400px; overflow-y:scroll; border:1px solid #ccc; padding:10px; white-space:pre-wrap;">
                                        {content}
                                    </div>
                                    """,
                                    unsafe_allow_html=True
                                )
                            except UnicodeDecodeError:
                                st.error(
                                    "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞.")

                        elif file['file_type'] == "pdf":
                            # –°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ PDF —Ñ–∞–π–ª–∞
                            file_url = f"/files/{file['file_name']}"
                            st.markdown(
                                 f'<embed src="{file_url}" width="100%" height="500px" type="application/pdf">',
                                 unsafe_allow_html=True
                            )
            else:
                st.write("–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤!")


    if selected_group:
        display_files()

    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª (txt –∏–ª–∏ pdf):",
                                     type=["txt", "pdf"])

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    if uploaded_file:
        if st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª") and selected_group:
            if uploaded_file.name in map(lambda x: x['file_name'],
                                         get_files_by_group(selected_group)):
                st.error(
                    f"–§–∞–π–ª '{uploaded_file.name}' —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –≥—Ä—É–ø–ø—É '{selected_group}'")
            else:
                start_time = time.time()
                add_file_to_db(uploaded_file, selected_group)
                st.success(
                    f"–§–∞–π–ª '{uploaded_file.name}' –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –≥—Ä—É–ø–ø—É '{selected_group}'")
                st.write(
                    f"–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: {time.time() - start_time:.2f} —Å–µ–∫—É–Ω–¥")

                files_container.empty()
                display_files()
