import uuid

import streamlit as st
import time
from datetime import datetime
from psycopg2.extras import RealDictCursor
from config import get_db_connection

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if 'user_input' not in st.session_state:
    st.session_state.user_input = ""

if 'chats' not in st.session_state:
    st.session_state.chats = {"Main Chat": [{"sender": "assistant", "message": "How can I help you?"}]}

if 'selected_chat' not in st.session_state:
    st.session_state.selected_chat = ""


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Ç–∞
def chatbot_response(user_message):
    # –ü—Ä–æ—Å—Ç–∞—è –∏–º–∏—Ç–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–∞—Ç–∞
    return f"–û—Ç–≤–µ—Ç –±–æ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_message}"


def create_chat(chat_name):
    chat_id = str(uuid.uuid4())  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º UUID –≤ —Å—Ç—Ä–æ–∫—É
    conn = get_db_connection()
    with conn:
        with conn.cursor() as cur:
            cur.execute(
                "INSERT INTO chats (id, name) VALUES (%s, %s)",
                (chat_id, chat_name)
            )
    conn.close()
    return chat_id


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
def get_chats():
    conn = get_db_connection()
    with conn:
        with conn.cursor(cursor_factory=RealDictCursor) as cur:
            cur.execute("SELECT id, name FROM chats ORDER BY timestamp DESC")
            chats = cur.fetchall()
    conn.close()
    return chats


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
def add_chat_message(chat_id, sender, message):
    conn = get_db_connection()
    with conn:
        with conn.cursor() as cur:
            cur.execute(
                "INSERT INTO messages (sender, message, chat_id) VALUES (%s, %s, %s)",
                (sender, message, chat_id)
            )
    conn.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –ø–æ chat_id
def get_chat_history(chat_id):
    conn = get_db_connection()
    with conn:
        with conn.cursor(cursor_factory=RealDictCursor) as cur:
            cur.execute(
                "SELECT sender, message, timestamp FROM messages WHERE chat_id = %s ORDER BY timestamp",
                (chat_id,)
            )
            chat_history = cur.fetchall()
    conn.close()
    return chat_history


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def add_file_to_db(file, group_name):
    conn = get_db_connection()
    with conn:
        with conn.cursor() as cur:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ ID –≥—Ä—É–ø–ø—ã
            cur.execute("SELECT id FROM file_groups WHERE group_name = %s", (group_name,))
            group = cur.fetchone()
            if not group:
                raise ValueError("–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            group_id = group[0]

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            cur.execute(
                """
                INSERT INTO files (group_id, file_name, file_type, timestamp, content)
                VALUES (%s, %s, %s, %s, %s)
                """,
                (
                    group_id,
                    file.name,
                    "pdf" if file.name.endswith(".pdf") else "txt",
                    datetime.now(),
                    file.getvalue()
                )
            )
    conn.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã —Ñ–∞–π–ª–æ–≤
def create_file_group(group_name):
    conn = get_db_connection()
    with conn:
        with conn.cursor() as cur:
            cur.execute("INSERT INTO file_groups (group_name) VALUES (%s) ON CONFLICT DO NOTHING", (group_name,))
    conn.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø —Ñ–∞–π–ª–æ–≤
def get_file_groups():
    conn = get_db_connection()
    with conn:
        with conn.cursor(cursor_factory=RealDictCursor) as cur:
            cur.execute("SELECT group_name FROM file_groups")
            groups = [row['group_name'] for row in cur.fetchall()]
    conn.close()
    return groups


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ø–æ –≥—Ä—É–ø–ø–µ
def get_files_by_group(group_name):
    conn = get_db_connection()
    with conn:
        with conn.cursor(cursor_factory=RealDictCursor) as cur:
            cur.execute(
                """
                SELECT f.file_name, f.file_type, f.timestamp, f.content
                FROM files f
                JOIN file_groups g ON f.group_id = g.id
                WHERE g.group_name = %s
                """,
                (group_name,)
            )
            files = cur.fetchall()
    conn.close()
    return files


# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —á–∞—Ç–æ–º –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π —Ñ–∞–π–ª–æ–≤")

tab1, tab2 = st.tabs(["–ß–∞—Ç", "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞"])

# –í–∫–ª–∞–¥–∫–∞ —á–∞—Ç–∞
with tab1:
    st.title("üí¨ Chatbot")

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    with st.sidebar:
        st.title("–í–∞—à–∏ —á–∞—Ç—ã")

        # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
        new_chat_name = st.text_input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞", key="new_chat_name")

        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
        if st.button("–°–æ–∑–¥–∞—Ç—å —á–∞—Ç"):
            if new_chat_name:
                chat_id = create_chat(new_chat_name)  # –°–æ–∑–¥–∞–µ–º —á–∞—Ç –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ chat_id
                st.session_state.chats[chat_id] = new_chat_name
                st.session_state.selected_chat_id = chat_id

        # –ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ selectbox
        chats = get_chats()
        chat_options = {chat['id']: chat['name'] for chat in chats}
        selected_chat_id = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç", options=list(chat_options.keys()), format_func=lambda x: chat_options[x])
        st.session_state.selected_chat_id = selected_chat_id

    st.caption("üöÄ A chatbot powered by DeepTech")

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
    if selected_chat_id:
        chat_messages = get_chat_history(selected_chat_id)
    else:
        chat_messages = []

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è —á–∞—Ç–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    chat_container = st.container()
    with chat_container:
        for msg in chat_messages:
            st.chat_message(msg["sender"]).write(msg["message"])

    # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤–≤–æ–¥–∞ –ø–æ–¥ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π
    prompt = st.chat_input("Your message...")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if prompt:
        if not selected_chat_id:
            st.error("–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç!")
        else:
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            add_chat_message(selected_chat_id, "user", prompt)
            with chat_container:
                st.chat_message("user").write(prompt)

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —á–∞—Ç–±–æ—Ç–∞
            response = chatbot_response(prompt)
            add_chat_message(selected_chat_id, "assistant", response)
            with chat_container:
                st.chat_message("assistant").write(response)

# –í–∫–ª–∞–¥–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
with tab2:
    st.header("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Ñ–∞–π–ª–æ–≤")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    group_names = get_file_groups()
    selected_group = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", group_names, key="selected_group")

    # –ü–æ–∫–∞–∑ —Ñ–∞–π–ª–æ–≤ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
    if selected_group:
        st.subheader(f"–§–∞–π–ª—ã –≤ –≥—Ä—É–ø–ø–µ: {selected_group}")
        files = get_files_by_group(selected_group)
        for file in files:
            st.write(f"–ò–º—è —Ñ–∞–π–ª–∞: {file['file_name']}")
            st.write(f"–¢–∏–ø —Ñ–∞–π–ª–∞: {file['file_type']}")
            st.write(f"–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: {file['timestamp'].strftime('%Y-%m-%d %H:%M:%S')}")
            with st.expander("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∞–π–ª"):
                st.text(file['content'].decode("utf-8") if file['file_type'] == "txt" else "PDF –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã
    new_group = st.text_input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã –¥–ª—è —Ñ–∞–π–ª–æ–≤:")
    if st.button("–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É"):
        if new_group:
            create_file_group(new_group)
            st.success(f"–ì—Ä—É–ø–ø–∞ '{new_group}' —Å–æ–∑–¥–∞–Ω–∞!")

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ –≥—Ä—É–ø–ø—É
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª (txt –∏–ª–∏ pdf):", type=["txt", "pdf"])
    if uploaded_file and selected_group:
        start_time = time.time()
        add_file_to_db(uploaded_file, selected_group)
        st.success(f"–§–∞–π–ª '{uploaded_file.name}' –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –≥—Ä—É–ø–ø—É '{selected_group}'")
        st.write(f"–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: {time.time() - start_time:.2f} —Å–µ–∫—É–Ω–¥")
